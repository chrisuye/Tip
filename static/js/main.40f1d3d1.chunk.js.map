{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","tip","setTip","bill","setBill","tipPercent","setTipPercent","total","setTotal","people","setPeople","totalPerPerson","setTotalPerPerson","useEffect","toFixed","className","type","placeholder","onChange","e","target","value","parseFloat","axis","x","xmin","xmax","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qNAuEeA,EAnEH,WACV,MAAsBC,mBAAS,GAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAwBF,mBAAS,GAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAoCJ,mBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAA0BN,mBAAS,GAAnC,mBAAOO,EAAP,KAAcC,EAAd,KACA,EAA4BR,mBAAS,GAArC,mBAAOS,EAAP,KAAeC,EAAf,KACA,EAA4CV,mBAAS,GAArD,mBAAOW,EAAP,KAAuBC,EAAvB,KAYA,OAVAC,qBAAU,WACR,IAAMZ,EAAME,GAAQE,EAAa,KAC3BE,EAAQJ,EAAOF,EACfU,EAAiBJ,EAAQE,EAC/BP,EAAOD,EAAIa,QAAQ,IACnBN,EAASD,EAAMO,QAAQ,IACvBF,EAAkBD,EAAeG,QAAQ,MACxC,CAACX,EAAME,EAAYI,IAIpB,qBAAKM,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,aAAf,UACE,sBAAKA,UAAU,UAAf,UACE,sCACA,4BAAIR,OAEN,sBAAKQ,UAAU,UAAf,UACE,oCACA,4BAAId,OAEN,sBAAKc,UAAU,UAAf,UACE,uCACA,4BAAIJ,UAGR,qBAAKI,UAAU,WAAf,SACE,sBAAKA,UAAU,aAAf,UACE,qBAAKA,UAAU,YAAf,SACE,uBAAOC,KAAK,SAASC,YAAY,OAAOC,SAAU,SAACC,GAAD,OAAOA,EAAEC,OAAOC,OAAS,EAAIjB,EAAQkB,WAAWH,EAAEC,OAAOC,QAASjB,EAAQ,QAE9H,sBAAKW,UAAU,YAAf,UACE,sCAASV,EAAT,OACA,cAAC,IAAD,CACEkB,KAAK,IACLC,EAAGnB,EACHoB,KAAM,EACNC,KAAM,IACNR,SAAU,gBAAGM,EAAH,EAAGA,EAAH,OAAWlB,EAAckB,SAGvC,sBAAKT,UAAU,YAAf,UACE,yCAAYN,KACZ,cAAC,IAAD,CACEc,KAAK,IACLC,EAAGf,EACHgB,KAAM,EACNC,KAAM,IACNR,SAAU,gBAAGM,EAAH,EAAGA,EAAH,OAAWd,EAAUc,oBCjDhCG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.40f1d3d1.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport Slider from 'react-input-slider';\n\nconst App = () => {\n  const [tip, setTip] = useState(0);\n  const [bill, setBill] = useState(0);\n  const [tipPercent, setTipPercent] = useState(0);\n  const [total, setTotal] = useState(0);\n  const [people, setPeople] = useState(1);\n  const [totalPerPerson, setTotalPerPerson] = useState(0);\n\n  useEffect(() => {\n    const tip = bill * (tipPercent / 100);\n    const total = bill + tip;\n    const totalPerPerson = total / people;\n    setTip(tip.toFixed(2));\n    setTotal(total.toFixed(2));\n    setTotalPerPerson(totalPerPerson.toFixed(2));\n  }, [bill, tipPercent, people]);\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-inner\">\n        <div className=\"App-header\">\n          <div className='display'>\n            <p>Total</p>\n            <p>{total}</p>\n          </div>\n          <div className='display'>\n            <p>Tip</p>\n            <p>{tip}</p>\n          </div>\n          <div className='display'>\n            <p>Person</p>\n            <p>{totalPerPerson}</p>\n          </div>\n        </div>\n        <div className=\"App-body\">\n          <div className=\"App-inputs\">\n            <div className=\"App-input\">\n              <input type=\"number\" placeholder='Bill' onChange={(e) => e.target.value >= 0 ? setBill(parseFloat(e.target.value)): setBill(0)} />\n            </div>\n            <div className=\"App-input\">\n              <p>Tip: {tipPercent}%</p>\n              <Slider\n                axis=\"x\"\n                x={tipPercent}\n                xmin={0}\n                xmax={100}\n                onChange={({ x }) => setTipPercent(x)}\n              />\n            </div>\n            <div className=\"App-input\">\n              <p>People: {people}</p>\n              <Slider\n                axis=\"x\"\n                x={people}\n                xmin={1}\n                xmax={100}\n                onChange={({ x }) => setPeople(x)}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}